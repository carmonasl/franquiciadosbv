import { createServerClient } from "@supabase/ssr";
import { NextResponse, NextRequest } from "next/server";

export async function middleware(request: NextRequest) {
  const response = NextResponse.next({
    request: {
      headers: request.headers,
    },
  });

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return request.cookies.getAll();
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value, options }) => {
            request.cookies.set(name, value);
            response.cookies.set(name, value, options);
          });
        },
      },
    }
  );

  console.log("üîç Middleware running for:", request.nextUrl.pathname);
  console.log(
    "üç™ Request cookies:",
    request.cookies
      .getAll()
      .map((c) => `${c.name}=${c.value.substring(0, 20)}...`)
  );

  const {
    data: { user },
    error,
  } = await supabase.auth.getUser();

  console.log("üë§ Middleware user check:", {
    hasUser: !!user,
    userId: user?.id,
    userEmail: user?.email,
    error: error?.message,
  });

  const protectedRoutes = ["/dashboard", "/documents", "/news", "/reports"];
  const isProtectedRoute = protectedRoutes.some((route) =>
    request.nextUrl.pathname.startsWith(route)
  );

  console.log("üõ°Ô∏è Route protection check:", {
    pathname: request.nextUrl.pathname,
    isProtectedRoute,
    hasUser: !!user,
  });

  // TEMPORARILY: Let all dashboard requests through for debugging
  if (request.nextUrl.pathname.startsWith("/dashboard")) {
    console.log("üö® TEMPORARILY allowing dashboard access for debugging");
    return response;
  }

  // Redirect to login if accessing protected route without auth
  if (isProtectedRoute && !user) {
    console.log("‚ùå Redirecting to login: no user for protected route");
    const url = request.nextUrl.clone();
    url.pathname = "/login";
    return NextResponse.redirect(url);
  }

  // Redirect to dashboard if already logged in and trying to access login
  if (request.nextUrl.pathname === "/login" && user) {
    console.log("‚úÖ Redirecting to dashboard: user already authenticated");
    const url = request.nextUrl.clone();
    url.pathname = "/dashboard";
    return NextResponse.redirect(url);
  }

  console.log("‚úÖ Middleware allowing request to proceed");
  return response;
}

export const config = {
  matcher: [
    "/dashboard/:path*",
    "/documents/:path*",
    "/news/:path*",
    "/reports/:path*",
    "/login",
  ],
};
